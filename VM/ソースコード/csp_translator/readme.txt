
			csp_translatorの使い方

1. はじめに
===========

本プログラムは、以下の機能を持ったトランスレータです。

  (1) 名大様提供のブロックレベル構造XML機能を入力し、一般的なCSP及び
      Kalray MPAAメニコア用のSigmaCのソースファイルを生成する

  (2) RTWおよびNEC製並列化ツールの出力他を入力として、一般的なCSPおよび
      XMOS用のCおよびXCソースファイルを生成する
      (ただし、2013/9/20以降の機能更新はありません)

また、本プログラムは、以下のライブラリを使用しているため、コンパイル及
び実行の際にはそれらの開発用パッケージが必要です。

  (1) Xerces-C++          (名大様ブロックレベル構造XML処理用)
  (2) graphviz            (グラフ処理用)
  (3) libxml2             (XML処理用)
  (4) Boost C++ Libraries (正規表現他)


2. 新機能
=========

・名大様提供のブロックレベル構造XMLからのMCOS/RH850向けコード生成


3. 制限
=======

以下の組み合わせでのコード生成は不完全です。

  (1) RTWおよびNEC製並列化ツールの出力他を入力として、一般的なCSPおよび
      Kalray MPAAメニコア用のSigmaCまたはMCOSのソースファイルを生成する

  (2) 名大様提供のブロックレベル構造XML機能を入力し、一般的なCSP及び
      XMOS用のCおよびXCソースファイルを生成する

今後、NEC製並列化ツールおよびXMOSについては採用しない方向ですので、本制
限を解除するかどうかは未定です。


3.1. Kalray MPAA対応
====================

・Kalray MPAAのSigmaCでは非同期の取り扱いがないため、非同期イベントには
　対応していません。
・ホストのagentから外部入出力を行う事ができます
・ホストのagentからの入力はマルチレート対応です。マルチレートの場合、
　task0にTimer agentを接続するようにすることができます
・Triggered Subsystemはそれぞれ動作タイミングがが異なりますが、これらの
　ブロックは、現状、同じベースレートで動作します
・サンプル時間に対応しています
・RTW-ECが生成するコードで、分割されたサブブロック、結合されたブロック
　には対応していません。
・クラスタ、コア配置等の指定は行えません


3.2. XMOS対応(2013/9/20以降の更新はありません)
==============================================

・パラメタの処理で、パラメタの型は、構造体のタグ名の末尾に `_' が含まれ
  ている事を期待し、その `_' を取ったものを typedef された型名とします。
  これは、パラメタの型が、入力のヘッダファイルではtypedef宣言されておら
  ず、他のヘッダファイルに定義されているためです。

・スレッド数は、並列に実行する入力チャネル数、または出力チャネル数の大
  きい方としています。それで取りあえず PID 等は自動的にコアに分配でき、
  動作しています。

・CとXCの間の引数が(浮動小数点型を除く)構造体の場合で、その構造体が、状
  態・パラメタ・定数パラメタと共有されている場合、型名を正しく出力した
  り参照できない場合があります。この結果、型名の未定義、二重定義等のコ
  ンパイルエラーが発生する場合があります。

・分割された配列と複数変数を同一のチャネルで送受信できません。
  これは、分割された配列の入力が、XC→C→XCと関数呼び出しする特別なコー
  ド生成を行うためです。

・外部ポートに接続する事はできません。全てチャネルになります。

・サブブロックからの複数の変数出力が同一のサブブロックに入力される場合、
  その同時性を保証しません。

・feedbackの初期値出力は、その変数を含むチャネル全体の変数を一度送信し
  ます。通常の変数とfeedbackの変数が同一チャネルに混在している場合、注
  意してください。

・feedbackの初期値出力は、固定比マルチレートや部分配列には対応してません。

・デバッグ用タスクの出力機能は、サブブロックをまとめる場合にのみ対応し
  ています。また、デバッグ用タスクのコア割り当ては自動ではなく、手動で
  行う必要があります。


3.3. MCOS対応
=============

・現状task0は生成できません[制限事項]
・BLSXMLでコア配置したものはコア毎の単一スレッドにコードが生成されます。
　コア配置しないものは、ブロック単位に論理コアにスレッドを配置します
・Constantは後続ブロックにコピーされます
・単一の出力のUnitDelayは後続ブロックに結合されます
・BLSXMLの指定によりプロセスを集約します
・論理コアに配置されたスレッドは、入力または出力が完了しない場合には、
　他のスレッドを動作させるため、一旦sleepします


4. コンパイル
=============

プログラムのコンパイルは単に make を実行してください。

  $ make

Makefileで設定可能なオプションは以下の通りです。

  USE_DMALLOC

    本マクロは開発時の検証用です。本マクロを y にすると dmalloc ライブ
    ラリをリンクし、メモリリーク、メモリ破壊等の検出を行います。

  IDENT_CHECK

    本マクロは開発時の検証用です。本マクロを y にすると、各種構造体が適
    切に使用され、キャスト間違いがないかどうか検証するようにコンパイル
    します。

以下のマクロは変更せず、そのままご使用ください。

  WITH_CGRAPH[=y]

    graphvizのcgraphライブラリを使用するかどうかを設定します。最近の
    linuxのディストリビューションではgraphvizのgraphライブラリが利用で
    きなくなっているためcgraphライブラリを使用するようにします。

  USE_SIMULINK_XSD_LIB[=y]

    名大様ブロックレベル構造XMLの機能をライブラリとして使用します。nの
    場合は、ライブラリではなくソースファイルをコンパイルしようとします。

    ライブラリやヘッダのディレクトリは SIMULINK_XSD で指定します。

  USE_GENERATED_XSD[=n]

    生成済み SimulinkModel.[ch]xx を使用する際に y にします。このマクロ
    と USE_SIMULINK_XSD_LIBが共にnの場合はSimulinkModel.xsdから、
    SimulinkModel.[ch]xxを自動生成します。

    ソースファイルは、SIMULINK_XSD の他に GENERATED_DIR に指定したディ
    レクトリから探します。

    なおUSE_SIMULINK_XSD_LIBがyの場合は、このマクロの値はnになります。



5. コマンドオプション
=====================

  csp_translator [-v] [-N core_num] [-Wt] [-t] [-C] [-u] [-r{f|d|32|64}] \
		[-o output.dot] [-d output.csv] [-X output.xc] \
		[-s csp.xml] \
		[-c input.c -p input.par.c -h input.h [-D input_data.c]] \
		[-i file.h] [-I file.h] [-nO] [-nT] [-nM] [-ni] \
		[-Sopt=val] [-Mopt=val] [-x[AXCD]] [-T{sc|xc}] [input.dot]

本プログラムのオプションは以下の通りで、また、長いオプションも使用可能
です。

  -v, --verbose

    verbose出力をします。色々な情報が出力されます。Warningがある場合、
    処理結果には注意が必要です。

  -N core_num,  --number-of-core=core_num  <XC用>

    コアの数を指定します。現在最大値は 256 です。

  -Wt,  --no-check-thread-numbers  <XC用>

    スレッドの上限を越えた場合のエラーを警告にし、エラーで終了させない
    ようにします。現状、スレッド数の算出が正しくないので、タスクの数が
    多い場合は、このオプションを指定することにより、取りあえずコード生
    成させる事ができます。

  -t,  --use-builtin-rtw-type  <XC用>

    RTWで使用する型をXCファイルに出力します。double, float 等は同じサイ
    ズのオブジェクトに定義します。このオプションを使用しない場合は、使
    用する型をヘッダファイル等に定義して使用する必要があります。

  -C,  --channeled-inout  <XC用>

    外部入出力をportではなく、チャネルを使用するようにします。

    ※浮動小数点を入出力する場合、このオプションを指定しないとダメなよ
      うです。(portが浮動小数点型を取り扱えない)

  -u,  --unshare-state  <XC用>

    状態変数をメモリ共有ではなく、チャネルで通信するようにします。
    オプションを指定しない場合メモリ共有になります。

  -r{f|d|32|64},  --real-size={f|d|32|64}

    real_T型をfloat(32bit)にするかdouble(64bit)にするか切り替えます。こ
    れは試験的オプションです。このオプションを指定しない場合は、
    double(64bit)になります。

  -o output.dot,  --output-csp=output.dot

    出力するCSPファイル名を指定します。本ファイルは、dotコマンドで処理
    可能です。指定しない場合は、標準出力へ出力します。

  -d output.csv,  --output-var=ouput.csv

    並列化Cソースファイルから入力し、解析した結果を出力するCSVファイル
    を指定します。これには入出力の変数、実行コードが含まれます。指定し
    ない場合は出力しません。

  -X output.{xc|sc},  --output-code=output.{xc|sc}

    XCまたはSigmaCのソースコード出力ファイルを指定します。省略した場合
    は、-Tオプションによって xc_default.xc または sc_default.sc になり
    ます。

  -s csp.xml,  --xml-csp=csp.xml  <-c,-h,-p未指定時必須オプション>

    名大様ブロックレベル構造XMLを入力処理し、コード生成を行います。

    本オプションはNEC製並列化ツールの生成ファイルを使用する際には使用し
    ません。

  -c input.c,  --c=input.c  <-s未指定時必須オプション>

    入力となる元のCソースファイルのファイル名を指定します。このファイル
    から内部状態の初期化情報を抽出します。

    本オプションはNEC製並列化ツールの生成ファイルを使用する際に使用しま
    す。名大様ブロックレベル構造XML(-sオプション)を使用する場合は使用し
    ません。

  -p input.par.c,  --para-c=input.par.c  <-s未指定時必須オプション>

    入力となる並列化Cソースファイルのファイル名を指定します。このファイ
    ルからタスクの実行部分と入出力変数を抽出します。

    本オプションはNEC製並列化ツールの生成ファイルを使用する際に使用しま
    す。名大様ブロックレベル構造XML(-sオプション)を使用する場合は使用し
    ません。

  -h input.h,  --header=input.h  <-s未指定時必須オプション>

    RTWが生成する各種宣言、型定義などが含まれるヘッダファイルを指定しま
    す。このファイルから、外部入出力、タスク間の入出力変数等の構造体を
    抽出します。

    本オプションはNEC製並列化ツールの生成ファイルを使用する際に使用しま
    す。名大様ブロックレベル構造XML(-sオプション)を使用する場合は使用し
    ません。

  -D input_data.c,  --data=input_data.c  <-s未指定時利用可能オプション>

    パラメタ、定数パラメタが出力されているファイルを指定します。このファ
    イルからパラメタや定数パラメタを取得し、Cのコードに出力します。

    本オプションはNEC製並列化ツールの生成ファイルを使用する際に使用しま
    す。名大様ブロックレベル構造XML(-sオプション)を使用する場合は使用し
    ません。

  -i file.h,  --c-include=file.h

    Cのソースコード出力時に、指定したファイル名を以下の形式で出力します。
    このオプションは複数同時に指定可能で、指定した順序で出力します。

        #include "file.h"

    このオプションは、例えば wrapper関数の宣言のある xxx_private.h をイ
    ンクルードするために使用します。

  -I file.h,  --xc-include=file.h <XC用>

    XCのソースコード出力時に、指定したファイル名を以下の形式で出力しま
    す。このオプションは複数同時に指定可能で、指定した順序で出力します。

        #include "file.h"

  -nO,  --find-end-task  <XC用>

    このオプションを指定すると、終端がないタスクフローグラフの場合、外
    部出力を行いません。このオプションを指定しない場合、外部出力変数を
    出力するタスクを終端と見なし、それに "OUT" プロセスを接続し、外部出
    力を行います。

  -nT,  --no-thread-cut  <XC用>

    このオプションを指定するとスレッド削減を行いません。このオプション
    を指定しない場合、スレッドが8を越えるタスクに対し、中継タスクを追加
    するスレッド削減処理を実行します。

  -nM,  --no-multiple-input  <XC用>

    このオプションを指定すると、複数タスクからの出力をエラーにします。
    (以前のプログラムと互換)
    このオプションを指定しない場合、複数タスクからの出力を許可し、出力
    先(ポートまたはチャネル)の名前を OUT<出力元タスクID> にします。

  -ni,  --no-initernalize  <XC用>

    このオプションを指定すると、他のタスクに伝播しないブロックシグナル
    を内部変数にせず、出力するようになります。
    デフォルトでは、これまで通り、伝播しないブロックシグナルは自動変数
    化し、アドレスを取っている変数はstatic変数にします。

  -S<option>=<value>

    このオプションはサブブロックのC/XCコードトランスレートを行います。
    このオプションでは -ni および -C を有効にして、伝播しない変数の出力
    と、外部変数をチャネル入出力に設定します。

    ・サブブロック名を出力する関数やファイル名のプレフィクスとします。
    ・サブブロック間で出力する変数一つ一つにチャネルを割り当てます
    ・実行後のサブブロック情報をXMLファイルに出力します
      (マージしたmain関数出力に使用する)

    以下のオプションがあります。

      -Sn=name,  --subblock-name=name

        サブブロック名(name)を指定します

      -So=sub.xml,  --output-subblock=sub.xml

        サブブロックの情報を出力するファイル(file.xml)を指定します。こ
        のファイルは実行時に作成されます。

      -Sd=depend.xml,  --subblock-dependency=depend.xml

        サブブロック間の依存関係を記述したファイル(depend.xml)を指定し
        ます。このファイルは実行時に読み込まれます。

    次のようにこれらオプションをセットで指定してください。

      csp_translator -Sn=sub1 -So=sub1.xml -Sd=depsub.xml ...

  -M<option>=<value>

    このオプションは -Cオプションを有効にして、サブブロック間のC/XCコー
    ドを統合するXCのmain関数を出力します。

    以下のオプションがあります

      -Mi=sub.xml,  --input-subblock=sub.xml

        サブブロック毎にトランスレートしたサブブロックの情報を指定しま
        す。このオプションは必要なサブブロック分、複数指定します。

      -Md=depend.xml,  --subblock-dependency=depend.xml

        サブブロック間の依存関係を記述したファイル(depend.xml)を指定し
        ます。このファイルは実行時に読み込まれます。

    次のようにこれらオプションをセットで指定してください。

      csp_translator -Mi=sub1.xml -Mi=sub2.xml -Md=depsub.xml ...

    基本的にこのモードでは他のオプションとして -X, -v, -N, -Wt, -t, -I
    の指定が可能です。

  -x[AXCD],  --debug-task=[AXCD]  <XC用>

    デバッグタスクの出力方法を指定します。オプションを指定しない場合、
    デバッグタスクは出力されません。このオプションは、現在、-Mオプショ
    ン時にのみ有効です。

      A: X, C, D の全てを有効にします。
      X: XC にデバッグタスクを出力します。
      C: Cの入出力用関数のファイルを出力します。
      D: コンパイルの妨げにならないよう、いくつかのマクロのデフォルト値
         を ifndef を使って未定義なら定義するようコード生成します。

    Cの関数の出力ファイル名は、入出力変数に対して以下のようになります。

       <サブブロック>_c_input_<変数>.c
       <サブブロック>_c_output_<変数>.c

    デバッグ用の入力および出力タスクのCPUコア番号は、以下のようなマクロ
    になります。

       <サブブロック>_DEBUG_IN  (入力タスクコア番号)
       <サブブロック>_DEBUG_OUT (出力タスクコア番号)

    入力回数については、以下のマクロを定義します。

       <サブブロック>_ITERATION

    詳細は出力XCファイル、Cの入出力関数ファイルを参照してください。

  -T{xc|sc},  --target={xc|sc}

    コード生成ターゲットを指定します。xcの場合、XMOS用XCコードを生成し、
    scの場合は、Kalray MPAA用SigmaCのコードを生成します。このオプション
    を指定しない場合は、Kalray MPAA用SigmaCコードを生成します。

  --subsystem-multirate={n|y}

    このオプションはKalray MPAA用SigmaCコード生成の場合、Triggered また
    は Enabled Subsystemの入力をレートの異なるサブシステムとするかどう
    かを指定します。nの場合は異なるレートとして扱いません。現状全てのブ
    ロックは同一のベースレートで動作するため、オプションを指定しない場
    合のデフォルトはnです。

    yの場合は、サブシステム内のブロックのサブシステム外からの入力がマル
    チレートになるため、サブシステム外から入力される変数の値について、
    同時性が保証さず、またagent数が増大します。

    現状は、本オプションを指定しないか、nを指定する事を推奨します。

  --incorporate-io={n|y}

    このオプションは、Kalray MPAA用SigmaCコード生成の場合で、外部入力・
    出力変数をそれぞれ単一のチャネルに集約し、ホスト(PC)上のagentと接続
    するかどうかをを指定します。

    オプションを指定しない場合のデフォルトはnで、入出力を集約せず、また
    ホスト上のagentとも接続しません。この場合、各外部入出力agentに対し、
    利用者が必要なコードを追加する必要があります。

    yの場合は、外部入力および出力をそれぞれ単一のagentに集約し、単一の
    チャネルをホスト上のagentに接続します。

    agentのインタフェースについてはトランスレータが生成します。オプショ
    ン --iotype-header を参照してください。

  --iotype-header=filename

    このオプションは、Kalray MPAA用SigmaCコード生成の場合で
    --incorporate-io=y で入出力チャネルを統合した場合の、ホスト上の外部
    agentと通信するインタフェースの記述(SCヘッダファイル)を出力するファ
    イル名を指定します。

　　このオプションを省略した場合は iotype.sch です。

    --incorporate-io=n または --incorporate-io オプションを省略した場合
    は、ファイルは出力されません。

  --input-multirate={n|y}

    このオプションは、Kalray MPAA用SigmaCコード生成の場合で、外部入力を
    マルチレートにするかどうかを指定します。--incorporate-io=yの時に使
    用できます。

    オプションを省略したときのデフォルトは n で、外部入力をマルチレート
    にしません(この場合、task0のレートはホスト側agentのレートに従いま
    す)。

    このオプションはホスト上のagentとKalray MPAA側のagentのレートが異な
    る場合に使用します。なお、外部入力が複数ある場合、マルチレートの入
    力agentが変数を共有メモリに出力中は、厳密には同時性は保証されません。

    また、task0には後述の --add-timer オプションを使用してタイマagentを
    接続するか task0 に所定のレートで自走の為のコード追加が必要です。

  --add-timer=N

    このオプションは、Kalray MPAA用SigmaCコード生成の場合で
    --input-multirate=nの時、かつtask0を自走させない場合に、task0に、N
    ミリ秒のタイマagentを接続するものです。

    このオプションを省略した場合、デフォルトではタイマagentは生成しませ
    ん。また、これは0を指定した場合も同じです。

    タイマはms単位のため、1msより短い周期でtask0を駆動したい場合には利
    用で来ません。

  --concat-block={y|n} [削除]

  --create-t0={n|y}

    このオプションは全体同期用のtask0を生成するかどうかを指定します。現
    状task0の生成は未実装ですので、--create-t0=y を指定しないでください。

  --ignore-to-sink={y|n}

    このオプションはSimulinkのsink(ToWorkSpace/Terminator/Scope等)を削
    除します。デフォルトで有効です。この結果、孤立したブロックができる
    場合があるので、通常は-ignore-isolated=yも指定してください。

  --ignore-isolated={y|n}

    このオプションは入力も出力もない孤立したブロックを削除します。デフォ
    ルトで有効です。

  --ignore-leaves={n|y}

    このオプションは出力がないブロックを削除します。デフォルトでは無効
    です。メインのデータバスのみ評価すればいい時に使用します。

  --xsd-validation

    このオプションは--xml-cspで指定されたXMLをXML Schemaを用いて
    validationします。本オプションを省略した場合、validationは無効です。

  --staticalize

    このオプションはeMCOSのコード生成時に、スレッド内の入出力変数、状態
    変数、パラメタ、定数パラメタをstatic宣言します。スレッドのスタック
    サイズが大きすぎる場合に本オプションを指定する事でスタックサイズの
    削減を図ることができますが、各変数についてコンパイラの最適化(レジス
    タ割り当て、ロードストア削減等)が期待できなくなります。

  --disable-multirate

    このオプションはeMCOSのコード生成時に、ブロックに設定されているサン
    プル時間を無視し、全てのブロックをベースレートで駆動する、RTW-ECの
    コードの動作と同様のコード生成を行います(旧来のコード生成)。本オプ
    ションを省略した場合、ブロックに設定されているサンプル時間でブロッ
    クを駆動し、マルチレートの入出力を行うようにコード生成を行います。

    ブロックのサンプル時間の継承が正しく解決されていない状況では、実行
    結果が不正になる場合があります。その場合は本オプションを使用してく
    ださい。

  --enable-csr

    このオプションはサンプル時間が設定されているブロックをeMCOSの
    CSR(Cyclic Service Routine)を用いて実行するようにします。ただし、
    CSRのサイクルの最小値は1msのため、実行は遅くなります。本オプション
    を省略した場合、CSRを使用しません。この場合、同期通信により実行タイ
    ミングが制御されます(ベストエフォート)。

  input.dot  <XC用>

    並列化ツールが出力するタスクフローグラフのファイル名を指定します。
    指定されない場合、標準入力から読み込みます。


現状の推奨実行オプション:

<XMOS XC用>

csp_translator -v -N 4 -Wt -t -C -u \
  -o output.dot -d output.csv \
  -X output.xc -c input.c -p input.par.c -h input.h -D input_data.c \
  -T xc input.dot

[ロングオプション使用時]
csp_translator \
  --verbose --number-of-core=4 --no-check-thread-numbers \
  --use-builtin-rtw-type --channeled-inout --unshare-state \
  --output-csp=output.dot --output-var=output.csv --output-code=output.xc \
  --c=input.c --para-c=input.par.c --header=input.h --data=input_data.c \
  --target=xc input.dot

<Kalray MPAA SigmaC用>

csp_translator \
  -v -o output.dot -d output.csv -s csp.xml -T sc -X output.sc

[ロングオプション使用時]
csp_translator \
  --verbose \
  --output-csp=output.dot --output-var=output.csv --xml-csl=csp.xml \
  --target=sc --output-code=output.sc

<MCOS用>

csp_translator \
  -v -o output.dot -d output.csv -s csp.xml -T mcos -X output.c

[ロングオプション使用時]
csp_translator \
  --verbose \
  --output-csp=output.dot --output-var=output.csv --xml-csl=csp.xml \
  --target=mcos --output-code=output.c

以上
